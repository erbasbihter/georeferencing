getwd()
install.packages("rstudioapi")
install.packages("rstudioapi")
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
cenischools.all.final <- read_excel("../raw/cenischools_clean_v3.xlsx")
install.packages("here")
library(here)
cenischools.all.final <- read_excel(here() %>% dirname(), "raw/cenischools_clean_v3.xlsx")
cenischools.all.final <- read_excel(file.path(here() %>% dirname(), "raw/cenischools_clean_v3.xlsx"))
cenischools.all.final <- read_excel(here("raw", "cenischools_clean_v3.xlsx"))
rm(list=ls())
library(sf)
library(rgeos)
library(dplyr)
library(tidyverse)
library(stringr)
library(readxl)
library(tmap)
library(rstudioapi)
library(here)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
cenischools.all.final <- read_excel(here("raw", "cenischools_clean_v3.xlsx"))
cenischools.all.final <- read_excel(here() %>% dirname(), "raw/cenischools_clean_v3.xlsx")
help(read_excel)
cenischools.all.final <- read_excel(file.path(here() %>% dirname(), "raw"))
print(file.path(here() %>% dirname(), "raw")
file.path(here() %>% dirname(), "raw"
file.path(here() %>% dirname(), "raw"
file.path(here() %>% dirname(), "raw"
print(file.path(here() %>% dirname(), "raw"))
cenischools.all.final <- read_excel(paste((file.path(here() %>% dirname(), "raw")),'cenischools_clean_v3.xlsx'))
cenischools.all.final <- read_excel(paste((file.path(here() %>% dirname(), "raw")),'cenischools_clean_v3.xlsx', sep="/"))
sigeschools.all <- read_excel(paste((file.path(here() %>% dirname(), "raw")),'sigeschools_clean_v3.xlsx', sep="/"))
kinshasa_sf <- read_sf(paste((file.path(here() %>% dirname(), "maps/osm_rdc_communes_221005")),'OSM_RDC_communes_221005.shpx', sep="/")) %>%
dplyr::filter(is_in_admi == "Kinshasa") %>%
dplyr::mutate(name = toupper(name)) %>%
dplyr::mutate(name = ifelse(name == "N'DJILI", "NDJILI", name)) %>%
dplyr::mutate(name = ifelse(name == "MONT NGAFULA", "MONT-NGAFULA", name))
kinshasa_sf <- read_sf(paste((file.path(here() %>% dirname(), "maps/osm_rdc_communes_221005")),'OSM_RDC_communes_221005.shp', sep="/")) %>%
dplyr::filter(is_in_admi == "Kinshasa") %>%
dplyr::mutate(name = toupper(name)) %>%
dplyr::mutate(name = ifelse(name == "N'DJILI", "NDJILI", name)) %>%
dplyr::mutate(name = ifelse(name == "MONT NGAFULA", "MONT-NGAFULA", name))
congo_shp <- read_sf(paste((file.path(here() %>% dirname(), "maps/congo")),'COD_adm0.shp', sep="/"))
rm(list=ls())
library(sf)
library(rgeos)
library(dplyr)
library(tidyverse)
library(stringr)
library(readxl)
library(tmap)
library(rstudioapi)
library(here) # Package to access parent directory while reading files (to rerun the code smoothly anywhere)
# Set the path current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
cenischools.all.final <- read_excel(paste((file.path(here() %>% dirname(), "raw")),'cenischools_clean_v3.xlsx', sep="/"))
sigeschools.all <- read_excel(paste((file.path(here() %>% dirname(), "raw")),'sigeschools.xlsx', sep="/"))
ceni_kinshasa <- cenischools.all.final %>%
dplyr::mutate(ceni_nom_sv = toupper(ceni_nom_sv)) %>%
dplyr::filter(province == "KINSHASA")
ceni_kinshasa_match <- ceni_kinshasa %>%
dplyr::select(c("ceni_site_vote_ID","ceni_nom_sv","province","ceni_sect_chef_comm")) %>%
dplyr::mutate(match_var = paste(ceni_nom_sv)) %>%
dplyr::mutate(match_var = str_replace_all(match_var, fixed(" "), ""))
kinshasa_sf <- read_sf(paste((file.path(here() %>% dirname(), "maps/osm_rdc_communes_221005")),'OSM_RDC_communes_221005.shp', sep="/")) %>%
dplyr::filter(is_in_admi == "Kinshasa") %>%
dplyr::mutate(name = toupper(name)) %>%
dplyr::mutate(name = ifelse(name == "N'DJILI", "NDJILI", name)) %>%
dplyr::mutate(name = ifelse(name == "MONT NGAFULA", "MONT-NGAFULA", name))
kinshasa_sf <-  kinshasa_sf %>% dplyr::mutate(area = as.numeric(st_area(kinshasa_sf))) %>%
dplyr::mutate(area_tot=sum(area)) %>%
dplyr::mutate(share=area/area_tot*100) %>%
dplyr::mutate(area_mean=mean(area)) %>%
dplyr::mutate(area_sd=sd(area)) %>%
dplyr::mutate(buffer1=abs(1-abs((area-area_mean)/(area_sd)))*3000) %>%
dplyr::mutate(buffer2=area*10^(-6)+2000)
# Remove blanks in the school name
sigeschools.all$NomEcole <- str_replace_all(sigeschools.all$NomEcole, fixed(" "), "")
# Edit Sproved names (add hypens where necessary) and remove blanks
sigeschools.all <- sigeschools.all %>%
dplyr::mutate(Sproved = ifelse(Sproved == "NGIRI NGIRI", "NGIRI-NGIRI", Sproved)) %>%
dplyr::mutate(Sproved = ifelse(Sproved == "MONT NGAFULA", "MONT-NGAFULA", Sproved)) %>%
dplyr::mutate(Sproved = ifelse(Sproved == "KASA VUBU", "KASA-VUBU", Sproved)) %>%
dplyr::mutate_at(.vars=vars(Sproved), list(~ gsub("[[:punct:]]", "", .)))
# Create a sf data using the edited sige data
sigeschools.all_sf = st_as_sf(sigeschools.all, coords = c("GPS_longitude", "GPS_latitude"),
crs = 4326)
commune <- unique(ceni_kinshasa$ceni_sect_chef_comm)
for(c in commune){
temp_kinshasa_sf <- kinshasa_sf %>%
dplyr::filter(name == c)
temp_ceni_kishasa_match <- ceni_kinshasa_match %>%
dplyr::filter(ceni_sect_chef_comm == c)
temp_kinshasa_sf_buffer_2km <- st_buffer(temp_kinshasa_sf,temp_kinshasa_sf$buffer2)
# Identify schools falling within commune's buffer
sigeschools.all_sf_admin <- st_join(sigeschools.all_sf,temp_kinshasa_sf_buffer_2km) %>%
dplyr::filter(!is.na(name)) %>%
dplyr::distinct(NomEcole, geometry, .keep_all = TRUE) %>%
dplyr::distinct(NomEcole, name, .keep_all = TRUE)  #remove duplicates within same ville
# Generate Matching Variable SIGE
temp_sige_match <- sigeschools.all_sf_admin %>%
dplyr::mutate(match_var = paste(NomEcole)) %>%
dplyr::mutate(match_var = str_replace_all(match_var, fixed(" "), "")) %>%
dplyr::select(c("match_var","latitude","longitude", "name")) %>%
#dplyr::filter(name == c) %>% ##?
dplyr::mutate(info = NA)
temp_sige_match <- temp_sige_match %>%
dplyr::mutate(match_var_trimmed = match_var) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed),
list(~ gsub("COMPLEXESCOLAIRE|ECOLEMATERNELLE|COLLEGE|ECOLEPRIMAIRE|LYCEE|INSTITUT|INSTITUTSCIENTIFIQUE|INSTITUTTECHNIQUEAGRICOLE|INSTITUTTECHNIQUEPROFESSIONNEL|INSTITUTTECHNOLOGIQUE|GROUPESCOLAIRE|ACADEMIE", "", .))) %>%  # remove school types
group_by(match_var_trimmed) %>% add_count(name = "occurence") %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("ALEXIA2", "ALEXIA", .)))
# Take all the 1 occurences and add other school types in here
temp_sige_match.expanded <- temp_sige_match[rep(row.names(temp_sige_match),
ifelse(temp_sige_match$occurence==1, 8, 1)), ] %>%
group_by(match_var_trimmed) %>%
#add_count(name = "ind") %>%
dplyr::mutate(ind = row_number()) %>%
filter(occurence == 1)
temp_sige_match.expanded$match_var_trimmed <- paste(temp_sige_match.expanded$ind, temp_sige_match.expanded$match_var_trimmed)
temp_sige_match.expanded<- temp_sige_match.expanded %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(1)\\s+(*.)",
"ECOLEPRIMAIRE\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(2)\\s+(*.)",
" ECOLEMATERNELLE\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(3)\\s+(*.)",
" COLLEGE\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(4)\\s+(*.)",
" LYCEE\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(5)\\s+(*.)",
" INSTITUT\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(6)\\s+(*.)",
" GROUPESCOLAIRE\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(7)\\s+(*.)",
" COMPLEXESCOLAIRE\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("(8)\\s+(*.)",
" ACADEMIE\\2", .))) %>%
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("\\s\\s", " ", .))) %>% # DOUBLE SPACE
dplyr::mutate_at(.vars=vars(match_var_trimmed), list(~ gsub("^\\s|\\s$", "", .))) %>%   # SINGLE SPACE BEGINNING OR END
dplyr::mutate(merge_exp=1)
# Append the extended dataframe
temp_sige_match.final <- dplyr::bind_rows(temp_sige_match,  temp_sige_match.expanded)  %>%
dplyr::mutate_at(c('merge_exp'), ~replace_na(.,0))
temp_sige_match.final <- temp_sige_match.final %>%
dplyr::mutate(match_var = ifelse(occurence == 1, match_var_trimmed, match_var))
# Match ceni and kinshasa for the particular commune
matching <- left_join(temp_ceni_kishasa_match,temp_sige_match.final, by = "match_var")
assign(c, matching)
}
# Append all the data for each of the communes within single dataset
var_list = ls()
index = which(str_detect(var_list, "[[:upper:]]"))
names_list = var_list[index]
matching <- do.call(rbind, lapply(names_list, get, env=environment()))
library(writexl)
write_xlsx(georeference_kinshasa, paste((file.path(here() %>% dirname(), "output")),'georeference_kinshasa.xlsx', sep="/"))
georeference_kinshasa <- matching %>%
#dplyr::select(c(ceni_site_vote_ID,latitude, longitude)) %>%
dplyr::filter(!is.na(latitude)) %>%
dplyr::mutate(source = "kinshasa")
matching_filtered <- matching %>% dplyr::filter(is.na(latitude))
matching_filtered_wo_dup <- matching_filtered %>% dplyr::filter(!str_detect(match_var,
"ACADEMIE")) %>%
distinct(ceni_site_vote_ID, ceni_sect_chef_comm, latitude, .keep_all=TRUE)
x <- nrow(georeference_kinshasa)
y <- nrow(matching)
z <- nrow(matching_filtered) - nrow(matching_filtered_wo_dup)
matching_performance <- x/(y-z)*100
library(writexl)
write_xlsx(georeference_kinshasa, paste((file.path(here() %>% dirname(), "output")),'georeference_kinshasa.xlsx', sep="/"))
#write_xlsx(georeference_kinshasa,"georeference_kinshasa.xlsx")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list=ls())
library(sf)
library(rgeos)
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringr)
library(readxl)
#library(tmap)
library(writexl)
library(preregr) # to avoid bind_rows problem
library(glue)
library(openxlsx)
library(rstudioapi)
library(here) # Package to access parent directory while reading files (to rerun the code smoothly anywhere)
library(ggplot2)
library(dplyr)
library(hrbrthemes)
# Set the path current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
df <- read_excel(paste((file.path(here::here(current_path) %>% dirname() %>% dirname(), "output")),'georeference.xlsx',sep="/"))
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
rm(list=ls())
library(sf)
library(rgeos)
library(rgdal)
library(dplyr)
library(tidyverse)
library(stringr)
library(readxl)
#library(tmap)
library(writexl)
library(preregr) # to avoid bind_rows problem
library(glue)
library(openxlsx)
library(rstudioapi)
library(here) # Package to access parent directory while reading files (to rerun the code smoothly anywhere)
library(ggplot2)
library(dplyr)
library(hrbrthemes)
# Set the path current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
df <- read_excel(paste((file.path(here::here(current_path) %>% dirname() %>% dirname(), "output")),'georeference.xlsx',sep="/"))
## Distribution of ballot boxes planned
p1 <- df %>%
mutate(text = fct_reorder(georeferenced, bv_prevus)) %>%
ggplot( aes(x=bv_prevus, color=text, fill=text)) +
geom_histogram(alpha=0.6, binwidth = 3) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(1, "lines"),
strip.text.x = element_text(size = 8),
panel.grid.major.x = element_blank()
) +
xlab("") +
ylab("Count") +
facet_wrap(~text) +
ggtitle("Distribution of Ballot Boxed Planned")
p1
## Distribution of ballot boxes counted
p2 <- df %>%
mutate(text = fct_reorder(georeferenced, bv_traites)) %>%
ggplot( aes(x=bv_traites, color=text, fill=text)) +
geom_histogram(alpha=0.6, binwidth = 3) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(1, "lines"),
strip.text.x = element_text(size = 8),
panel.grid.major.x = element_blank()
) +
xlab("") +
ylab("Count") +
facet_wrap(~text) +
ggtitle("Distribution of Ballot Boxed Counted")
p2
## Distribution of expected voters
p3 <- df %>%
mutate(text = fct_reorder(georeferenced, electeurs_attendus)) %>%
ggplot( aes(x=electeurs_attendus, color=text, fill=text)) +
geom_histogram(alpha=0.6, binwidth = 3) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(1, "lines"),
strip.text.x = element_text(size = 8),
panel.grid.major.x = element_blank()
) +
xlab("") +
ylab("Count") +
facet_wrap(~text) +
ggtitle("Distribution of Expected Voters")
p3
## Distribution of number of voters
p4 <- df %>%
mutate(text = fct_reorder(georeferenced, votants)) %>%
ggplot( aes(x=votants, color=text, fill=text)) +
geom_histogram(alpha=0.6, binwidth = 3) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(1, "lines"),
strip.text.x = element_text(size = 8),
panel.grid.major.x = element_blank()
) +
xlab("") +
ylab("Count") +
facet_wrap(~text) +
ggtitle("Distribution of Number of Voters")
p4
df2 <- df %>% mutate_if(is.numeric, ~replace_na(., 0)) %>% group_by(georeferenced) %>%
dplyr::summarise(across(c(bv_prevus, bv_traites, electeurs_attendus, votants, Tshisekedi, Fayulu, Shadary), sum),
.groups='drop') %>%
as.data.frame() %>%
mutate(share_Tshisekedi = Tshisekedi / votants*100) %>%
mutate(share_Fayulu = Fayulu / votants*100) %>%
mutate(share_Shadary = Shadary / votants*100)
df2
##Among the smallest adm unit, fo how many we have absolutely no georeferenced schools
df3 <- df %>% dplyr::mutate(admvar = paste(province, circonscription, ceni_sect_chef_comm, ceni_group_quart, ceni_address_vill_avenue)) %>%
group_by(admvar) %>% dplyr::summarise(total = n(), .groups='drop') %>% arrange(admvar)
df4 <- df %>% dplyr::mutate(admvar = paste(province, circonscription, ceni_sect_chef_comm, ceni_group_quart, ceni_address_vill_avenue)) %>%
group_by(admvar, georeferenced) %>% dplyr::summarise(count = n(), .groups='drop') %>% arrange(admvar) %>% pivot_wider(names_from = georeferenced, values_from = count)
df5 <- merge(df3, df4, by='admvar', all=TRUE) %>% mutate_if(is.numeric, ~replace_na(., 0)) %>% dplyr::mutate(share_unmatched = unmatched/total*100) %>% dplyr::mutate(share_matched = matched/total*100) %>% pivot_longer(cols=c('share_matched', 'share_unmatched'), names_to='group', values_to='shares' )
p5 <- df5 %>%
dplyr::mutate(text = fct_reorder(group, shares)) %>%
ggplot( aes(x=shares, color=text, fill=text)) +
geom_histogram(alpha=0.6, binwidth = 3) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(1, "lines"),
strip.text.x = element_text(size = 8),
panel.grid.major.x = element_blank()
) +
xlab("") +
ylab("Count") +
facet_wrap(~text) +
ggtitle("Distribution of Matching Share on Smallest AdmUnit")
p5
df6 <- df5 %>% dplyr::distinct(admvar, .keep_all=TRUE) %>% group_by(total) %>% summarise(n())
sp.groups <- df %>% dplyr::filter(!is.na(latitude))
sp::coordinates(sp.groups) <- ~longitude+latitude
library(geodist, include.only = NULL)
# mindistance Matrix
d <- geodist::geodist(df, measure = "geodesic")
diag(d) <- Inf
min.d <- max.col(-d)
min.d
groupdist <- cbind(df, df[min.d,], min.d)
groupdist$distance <- d[cbind(seq_along(min.d), min.d)]
groupdist
dff <- df %>% dplyr::filter(!is.na(latitude))
library(geodist, include.only = NULL)
# mindistance Matrix
d <- geodist::geodist(dff, measure = "geodesic")
diag(d) <- Inf
min.d <- max.col(-d)
min.d
groupdist <- cbind(df, df[min.d,], min.d)
groupdist <- cbind(dff, dff[min.d,], min.d)
groupdist$distance <- d[cbind(seq_along(min.d), min.d)]
groupdist
max.d <- max.col(d)
max.d
groupdist$distancemax <- d[cbind(seq_along(max.d), max.d)]
View(groupdist)
max.d <- min.col(-d)
